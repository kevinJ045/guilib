import { HTMLGUIWidget, child } from "../widgets/_ghost/WidgetProps";
import { attr } from "./elman";
declare class Dom {
    elements: Array<HTMLElement | HTMLGUIWidget>;
    constructor(element: HTMLElement | string, classes?: null | string, attributes?: null | string);
    at(index: number): HTMLElement | HTMLGUIWidget;
    push(child: child): this;
    unshift(child: child): this;
    shift(): HTMLElement | HTMLGUIWidget;
    pop(): HTMLElement | HTMLGUIWidget;
    forEach(callback: any): this;
    get length(): number;
    addClass(classes: string): Dom;
    removeClass(classes: string): Dom;
    toggleClass(classes: string): Dom;
    hasClass(classes: string): boolean;
    attr(attr: object | string): any;
    getAttr(attr: string): any;
    prop(attr: object | string): any;
    getProp(attr: string): any;
    html(html: string | null): string | null;
    width(width?: string | number | null): number | this;
    height(height?: string | number | null): number | this;
    text(text: string | null): string | null;
    append(element: HTMLElement | Dom): this;
    appendTo(element: HTMLElement): Dom;
    prepend(element: HTMLElement): this;
    prependTo(element: HTMLElement): Dom;
    css(values: string | object, value: string | null): Dom;
    remove(): Dom;
    empty(): Dom;
    children(): Dom;
    siblings(): Dom;
    parent(): Dom | null;
    closest(selector: string): Dom | null;
    find(selector: string): Dom;
    find<S extends HTMLElement>(predicate: (value: HTMLElement, index: number, array: HTMLElement[]) => value is S): S | undefined;
    find(predicate: (value: HTMLElement, index: number, array: HTMLElement[]) => unknown): HTMLElement | undefined;
    on(event: string, callback: Function): this;
    is(selector: string): any;
    off(name: string, callback?: Function | null): this;
    trigger(event: string, data: any): this;
    show(): Dom;
    hide(): Dom;
    toggle(): Dom;
    enable(): Dom;
    disable(): Dom;
    static from(elements: HTMLElement[] | HTMLCollection): Dom;
    static create(element: string, classes?: string, attr?: attr): Dom;
}
export default Dom;
